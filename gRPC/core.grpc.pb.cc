// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: core.proto

#include "core.pb.h"
#include "core.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace core_api {

static const char* CoreOptimalControlService_method_names[] = {
  "/core_api.CoreOptimalControlService/CalcOptimalTask",
  "/core_api.CoreOptimalControlService/SetOptimizerParams",
};

std::unique_ptr< CoreOptimalControlService::Stub> CoreOptimalControlService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CoreOptimalControlService::Stub> stub(new CoreOptimalControlService::Stub(channel, options));
  return stub;
}

CoreOptimalControlService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CalcOptimalTask_(CoreOptimalControlService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetOptimizerParams_(CoreOptimalControlService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CoreOptimalControlService::Stub::CalcOptimalTask(::grpc::ClientContext* context, const ::core_api::OptimalRequest& request, ::core_api::OptimalResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::core_api::OptimalRequest, ::core_api::OptimalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CalcOptimalTask_, context, request, response);
}

void CoreOptimalControlService::Stub::async::CalcOptimalTask(::grpc::ClientContext* context, const ::core_api::OptimalRequest* request, ::core_api::OptimalResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::core_api::OptimalRequest, ::core_api::OptimalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalcOptimalTask_, context, request, response, std::move(f));
}

void CoreOptimalControlService::Stub::async::CalcOptimalTask(::grpc::ClientContext* context, const ::core_api::OptimalRequest* request, ::core_api::OptimalResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CalcOptimalTask_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core_api::OptimalResponse>* CoreOptimalControlService::Stub::PrepareAsyncCalcOptimalTaskRaw(::grpc::ClientContext* context, const ::core_api::OptimalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core_api::OptimalResponse, ::core_api::OptimalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CalcOptimalTask_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core_api::OptimalResponse>* CoreOptimalControlService::Stub::AsyncCalcOptimalTaskRaw(::grpc::ClientContext* context, const ::core_api::OptimalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCalcOptimalTaskRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CoreOptimalControlService::Stub::SetOptimizerParams(::grpc::ClientContext* context, const ::core_api::OptimizeParamsRequest& request, ::core_api::OptimizeParamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::core_api::OptimizeParamsRequest, ::core_api::OptimizeParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetOptimizerParams_, context, request, response);
}

void CoreOptimalControlService::Stub::async::SetOptimizerParams(::grpc::ClientContext* context, const ::core_api::OptimizeParamsRequest* request, ::core_api::OptimizeParamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::core_api::OptimizeParamsRequest, ::core_api::OptimizeParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOptimizerParams_, context, request, response, std::move(f));
}

void CoreOptimalControlService::Stub::async::SetOptimizerParams(::grpc::ClientContext* context, const ::core_api::OptimizeParamsRequest* request, ::core_api::OptimizeParamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOptimizerParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::core_api::OptimizeParamsResponse>* CoreOptimalControlService::Stub::PrepareAsyncSetOptimizerParamsRaw(::grpc::ClientContext* context, const ::core_api::OptimizeParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::core_api::OptimizeParamsResponse, ::core_api::OptimizeParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetOptimizerParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::core_api::OptimizeParamsResponse>* CoreOptimalControlService::Stub::AsyncSetOptimizerParamsRaw(::grpc::ClientContext* context, const ::core_api::OptimizeParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetOptimizerParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

CoreOptimalControlService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoreOptimalControlService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoreOptimalControlService::Service, ::core_api::OptimalRequest, ::core_api::OptimalResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CoreOptimalControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::core_api::OptimalRequest* req,
             ::core_api::OptimalResponse* resp) {
               return service->CalcOptimalTask(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CoreOptimalControlService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CoreOptimalControlService::Service, ::core_api::OptimizeParamsRequest, ::core_api::OptimizeParamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CoreOptimalControlService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::core_api::OptimizeParamsRequest* req,
             ::core_api::OptimizeParamsResponse* resp) {
               return service->SetOptimizerParams(ctx, req, resp);
             }, this)));
}

CoreOptimalControlService::Service::~Service() {
}

::grpc::Status CoreOptimalControlService::Service::CalcOptimalTask(::grpc::ServerContext* context, const ::core_api::OptimalRequest* request, ::core_api::OptimalResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CoreOptimalControlService::Service::SetOptimizerParams(::grpc::ServerContext* context, const ::core_api::OptimizeParamsRequest* request, ::core_api::OptimizeParamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace core_api
#include <grpcpp/ports_undef.inc>

