// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: adam_api.proto

#include "adam_api.pb.h"
#include "adam_api.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace adam_api {

static const char* AdamApiService_method_names[] = {
  "/adam_api.AdamApiService/SetGlobalParams",
  "/adam_api.AdamApiService/Optimize",
  "/adam_api.AdamApiService/Hamilton",
};

std::unique_ptr< AdamApiService::Stub> AdamApiService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AdamApiService::Stub> stub(new AdamApiService::Stub(channel, options));
  return stub;
}

AdamApiService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetGlobalParams_(AdamApiService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Optimize_(AdamApiService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Hamilton_(AdamApiService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AdamApiService::Stub::SetGlobalParams(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest& request, ::adam_api::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::adam_api::GlobalParamsRequest, ::adam_api::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetGlobalParams_, context, request, response);
}

void AdamApiService::Stub::async::SetGlobalParams(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest* request, ::adam_api::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::adam_api::GlobalParamsRequest, ::adam_api::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGlobalParams_, context, request, response, std::move(f));
}

void AdamApiService::Stub::async::SetGlobalParams(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest* request, ::adam_api::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetGlobalParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::adam_api::EmptyResponse>* AdamApiService::Stub::PrepareAsyncSetGlobalParamsRaw(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::adam_api::EmptyResponse, ::adam_api::GlobalParamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetGlobalParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::adam_api::EmptyResponse>* AdamApiService::Stub::AsyncSetGlobalParamsRaw(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetGlobalParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdamApiService::Stub::Optimize(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest& request, ::adam_api::OptimizeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::adam_api::OptimizeRequest, ::adam_api::OptimizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Optimize_, context, request, response);
}

void AdamApiService::Stub::async::Optimize(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest* request, ::adam_api::OptimizeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::adam_api::OptimizeRequest, ::adam_api::OptimizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Optimize_, context, request, response, std::move(f));
}

void AdamApiService::Stub::async::Optimize(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest* request, ::adam_api::OptimizeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Optimize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::adam_api::OptimizeResponse>* AdamApiService::Stub::PrepareAsyncOptimizeRaw(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::adam_api::OptimizeResponse, ::adam_api::OptimizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Optimize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::adam_api::OptimizeResponse>* AdamApiService::Stub::AsyncOptimizeRaw(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncOptimizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AdamApiService::Stub::Hamilton(::grpc::ClientContext* context, const ::adam_api::HamiltonRequest& request, ::adam_api::EmptyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::adam_api::HamiltonRequest, ::adam_api::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Hamilton_, context, request, response);
}

void AdamApiService::Stub::async::Hamilton(::grpc::ClientContext* context, const ::adam_api::HamiltonRequest* request, ::adam_api::EmptyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::adam_api::HamiltonRequest, ::adam_api::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hamilton_, context, request, response, std::move(f));
}

void AdamApiService::Stub::async::Hamilton(::grpc::ClientContext* context, const ::adam_api::HamiltonRequest* request, ::adam_api::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Hamilton_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::adam_api::EmptyResponse>* AdamApiService::Stub::PrepareAsyncHamiltonRaw(::grpc::ClientContext* context, const ::adam_api::HamiltonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::adam_api::EmptyResponse, ::adam_api::HamiltonRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Hamilton_, context, request);
}

::grpc::ClientAsyncResponseReader< ::adam_api::EmptyResponse>* AdamApiService::Stub::AsyncHamiltonRaw(::grpc::ClientContext* context, const ::adam_api::HamiltonRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncHamiltonRaw(context, request, cq);
  result->StartCall();
  return result;
}

AdamApiService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdamApiService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdamApiService::Service, ::adam_api::GlobalParamsRequest, ::adam_api::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdamApiService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::adam_api::GlobalParamsRequest* req,
             ::adam_api::EmptyResponse* resp) {
               return service->SetGlobalParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdamApiService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdamApiService::Service, ::adam_api::OptimizeRequest, ::adam_api::OptimizeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdamApiService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::adam_api::OptimizeRequest* req,
             ::adam_api::OptimizeResponse* resp) {
               return service->Optimize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AdamApiService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AdamApiService::Service, ::adam_api::HamiltonRequest, ::adam_api::EmptyResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AdamApiService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::adam_api::HamiltonRequest* req,
             ::adam_api::EmptyResponse* resp) {
               return service->Hamilton(ctx, req, resp);
             }, this)));
}

AdamApiService::Service::~Service() {
}

::grpc::Status AdamApiService::Service::SetGlobalParams(::grpc::ServerContext* context, const ::adam_api::GlobalParamsRequest* request, ::adam_api::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdamApiService::Service::Optimize(::grpc::ServerContext* context, const ::adam_api::OptimizeRequest* request, ::adam_api::OptimizeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AdamApiService::Service::Hamilton(::grpc::ServerContext* context, const ::adam_api::HamiltonRequest* request, ::adam_api::EmptyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace adam_api
#include <grpcpp/ports_undef.inc>

