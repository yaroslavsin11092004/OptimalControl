// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tasks_api.proto
#ifndef GRPC_tasks_5fapi_2eproto__INCLUDED
#define GRPC_tasks_5fapi_2eproto__INCLUDED

#include "tasks_api.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace tasks_api {

class TasksApiService final {
 public:
  static constexpr char const* service_full_name() {
    return "tasks_api.TasksApiService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CallEquation(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest& request, ::tasks_api::CallEquationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallEquationResponse>> AsyncCallEquation(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallEquationResponse>>(AsyncCallEquationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallEquationResponse>> PrepareAsyncCallEquation(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallEquationResponse>>(PrepareAsyncCallEquationRaw(context, request, cq));
    }
    virtual ::grpc::Status CallLinked(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest& request, ::tasks_api::CallLinkedResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallLinkedResponse>> AsyncCallLinked(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallLinkedResponse>>(AsyncCallLinkedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallLinkedResponse>> PrepareAsyncCallLinked(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallLinkedResponse>>(PrepareAsyncCallLinkedRaw(context, request, cq));
    }
    virtual ::grpc::Status CallParamS(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest& request, ::tasks_api::CallParamSResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallParamSResponse>> AsyncCallParamS(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallParamSResponse>>(AsyncCallParamSRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallParamSResponse>> PrepareAsyncCallParamS(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallParamSResponse>>(PrepareAsyncCallParamSRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void CallEquation(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest* request, ::tasks_api::CallEquationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallEquation(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest* request, ::tasks_api::CallEquationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CallLinked(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest* request, ::tasks_api::CallLinkedResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallLinked(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest* request, ::tasks_api::CallLinkedResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CallParamS(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest* request, ::tasks_api::CallParamSResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CallParamS(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest* request, ::tasks_api::CallParamSResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallEquationResponse>* AsyncCallEquationRaw(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallEquationResponse>* PrepareAsyncCallEquationRaw(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallLinkedResponse>* AsyncCallLinkedRaw(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallLinkedResponse>* PrepareAsyncCallLinkedRaw(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallParamSResponse>* AsyncCallParamSRaw(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tasks_api::CallParamSResponse>* PrepareAsyncCallParamSRaw(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CallEquation(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest& request, ::tasks_api::CallEquationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tasks_api::CallEquationResponse>> AsyncCallEquation(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tasks_api::CallEquationResponse>>(AsyncCallEquationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tasks_api::CallEquationResponse>> PrepareAsyncCallEquation(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tasks_api::CallEquationResponse>>(PrepareAsyncCallEquationRaw(context, request, cq));
    }
    ::grpc::Status CallLinked(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest& request, ::tasks_api::CallLinkedResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tasks_api::CallLinkedResponse>> AsyncCallLinked(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tasks_api::CallLinkedResponse>>(AsyncCallLinkedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tasks_api::CallLinkedResponse>> PrepareAsyncCallLinked(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tasks_api::CallLinkedResponse>>(PrepareAsyncCallLinkedRaw(context, request, cq));
    }
    ::grpc::Status CallParamS(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest& request, ::tasks_api::CallParamSResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tasks_api::CallParamSResponse>> AsyncCallParamS(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tasks_api::CallParamSResponse>>(AsyncCallParamSRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tasks_api::CallParamSResponse>> PrepareAsyncCallParamS(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tasks_api::CallParamSResponse>>(PrepareAsyncCallParamSRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CallEquation(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest* request, ::tasks_api::CallEquationResponse* response, std::function<void(::grpc::Status)>) override;
      void CallEquation(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest* request, ::tasks_api::CallEquationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CallLinked(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest* request, ::tasks_api::CallLinkedResponse* response, std::function<void(::grpc::Status)>) override;
      void CallLinked(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest* request, ::tasks_api::CallLinkedResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CallParamS(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest* request, ::tasks_api::CallParamSResponse* response, std::function<void(::grpc::Status)>) override;
      void CallParamS(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest* request, ::tasks_api::CallParamSResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tasks_api::CallEquationResponse>* AsyncCallEquationRaw(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tasks_api::CallEquationResponse>* PrepareAsyncCallEquationRaw(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tasks_api::CallLinkedResponse>* AsyncCallLinkedRaw(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tasks_api::CallLinkedResponse>* PrepareAsyncCallLinkedRaw(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tasks_api::CallParamSResponse>* AsyncCallParamSRaw(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tasks_api::CallParamSResponse>* PrepareAsyncCallParamSRaw(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CallEquation_;
    const ::grpc::internal::RpcMethod rpcmethod_CallLinked_;
    const ::grpc::internal::RpcMethod rpcmethod_CallParamS_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CallEquation(::grpc::ServerContext* context, const ::tasks_api::CallEquationRequest* request, ::tasks_api::CallEquationResponse* response);
    virtual ::grpc::Status CallLinked(::grpc::ServerContext* context, const ::tasks_api::CallLinkedRequest* request, ::tasks_api::CallLinkedResponse* response);
    virtual ::grpc::Status CallParamS(::grpc::ServerContext* context, const ::tasks_api::CallParamSRequest* request, ::tasks_api::CallParamSResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CallEquation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CallEquation() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CallEquation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallEquation(::grpc::ServerContext* /*context*/, const ::tasks_api::CallEquationRequest* /*request*/, ::tasks_api::CallEquationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallEquation(::grpc::ServerContext* context, ::tasks_api::CallEquationRequest* request, ::grpc::ServerAsyncResponseWriter< ::tasks_api::CallEquationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CallLinked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CallLinked() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CallLinked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallLinked(::grpc::ServerContext* /*context*/, const ::tasks_api::CallLinkedRequest* /*request*/, ::tasks_api::CallLinkedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallLinked(::grpc::ServerContext* context, ::tasks_api::CallLinkedRequest* request, ::grpc::ServerAsyncResponseWriter< ::tasks_api::CallLinkedResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CallParamS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CallParamS() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CallParamS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallParamS(::grpc::ServerContext* /*context*/, const ::tasks_api::CallParamSRequest* /*request*/, ::tasks_api::CallParamSResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallParamS(::grpc::ServerContext* context, ::tasks_api::CallParamSRequest* request, ::grpc::ServerAsyncResponseWriter< ::tasks_api::CallParamSResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CallEquation<WithAsyncMethod_CallLinked<WithAsyncMethod_CallParamS<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CallEquation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CallEquation() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::tasks_api::CallEquationRequest, ::tasks_api::CallEquationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tasks_api::CallEquationRequest* request, ::tasks_api::CallEquationResponse* response) { return this->CallEquation(context, request, response); }));}
    void SetMessageAllocatorFor_CallEquation(
        ::grpc::MessageAllocator< ::tasks_api::CallEquationRequest, ::tasks_api::CallEquationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tasks_api::CallEquationRequest, ::tasks_api::CallEquationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CallEquation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallEquation(::grpc::ServerContext* /*context*/, const ::tasks_api::CallEquationRequest* /*request*/, ::tasks_api::CallEquationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CallEquation(
      ::grpc::CallbackServerContext* /*context*/, const ::tasks_api::CallEquationRequest* /*request*/, ::tasks_api::CallEquationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CallLinked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CallLinked() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::tasks_api::CallLinkedRequest, ::tasks_api::CallLinkedResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tasks_api::CallLinkedRequest* request, ::tasks_api::CallLinkedResponse* response) { return this->CallLinked(context, request, response); }));}
    void SetMessageAllocatorFor_CallLinked(
        ::grpc::MessageAllocator< ::tasks_api::CallLinkedRequest, ::tasks_api::CallLinkedResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tasks_api::CallLinkedRequest, ::tasks_api::CallLinkedResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CallLinked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallLinked(::grpc::ServerContext* /*context*/, const ::tasks_api::CallLinkedRequest* /*request*/, ::tasks_api::CallLinkedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CallLinked(
      ::grpc::CallbackServerContext* /*context*/, const ::tasks_api::CallLinkedRequest* /*request*/, ::tasks_api::CallLinkedResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CallParamS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CallParamS() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::tasks_api::CallParamSRequest, ::tasks_api::CallParamSResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tasks_api::CallParamSRequest* request, ::tasks_api::CallParamSResponse* response) { return this->CallParamS(context, request, response); }));}
    void SetMessageAllocatorFor_CallParamS(
        ::grpc::MessageAllocator< ::tasks_api::CallParamSRequest, ::tasks_api::CallParamSResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tasks_api::CallParamSRequest, ::tasks_api::CallParamSResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CallParamS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallParamS(::grpc::ServerContext* /*context*/, const ::tasks_api::CallParamSRequest* /*request*/, ::tasks_api::CallParamSResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CallParamS(
      ::grpc::CallbackServerContext* /*context*/, const ::tasks_api::CallParamSRequest* /*request*/, ::tasks_api::CallParamSResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CallEquation<WithCallbackMethod_CallLinked<WithCallbackMethod_CallParamS<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CallEquation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CallEquation() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CallEquation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallEquation(::grpc::ServerContext* /*context*/, const ::tasks_api::CallEquationRequest* /*request*/, ::tasks_api::CallEquationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CallLinked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CallLinked() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CallLinked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallLinked(::grpc::ServerContext* /*context*/, const ::tasks_api::CallLinkedRequest* /*request*/, ::tasks_api::CallLinkedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CallParamS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CallParamS() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CallParamS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallParamS(::grpc::ServerContext* /*context*/, const ::tasks_api::CallParamSRequest* /*request*/, ::tasks_api::CallParamSResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CallEquation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CallEquation() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CallEquation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallEquation(::grpc::ServerContext* /*context*/, const ::tasks_api::CallEquationRequest* /*request*/, ::tasks_api::CallEquationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallEquation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CallLinked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CallLinked() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CallLinked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallLinked(::grpc::ServerContext* /*context*/, const ::tasks_api::CallLinkedRequest* /*request*/, ::tasks_api::CallLinkedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallLinked(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CallParamS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CallParamS() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CallParamS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallParamS(::grpc::ServerContext* /*context*/, const ::tasks_api::CallParamSRequest* /*request*/, ::tasks_api::CallParamSResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCallParamS(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CallEquation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CallEquation() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CallEquation(context, request, response); }));
    }
    ~WithRawCallbackMethod_CallEquation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallEquation(::grpc::ServerContext* /*context*/, const ::tasks_api::CallEquationRequest* /*request*/, ::tasks_api::CallEquationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CallEquation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CallLinked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CallLinked() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CallLinked(context, request, response); }));
    }
    ~WithRawCallbackMethod_CallLinked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallLinked(::grpc::ServerContext* /*context*/, const ::tasks_api::CallLinkedRequest* /*request*/, ::tasks_api::CallLinkedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CallLinked(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CallParamS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CallParamS() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CallParamS(context, request, response); }));
    }
    ~WithRawCallbackMethod_CallParamS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CallParamS(::grpc::ServerContext* /*context*/, const ::tasks_api::CallParamSRequest* /*request*/, ::tasks_api::CallParamSResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CallParamS(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CallEquation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CallEquation() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tasks_api::CallEquationRequest, ::tasks_api::CallEquationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tasks_api::CallEquationRequest, ::tasks_api::CallEquationResponse>* streamer) {
                       return this->StreamedCallEquation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CallEquation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CallEquation(::grpc::ServerContext* /*context*/, const ::tasks_api::CallEquationRequest* /*request*/, ::tasks_api::CallEquationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallEquation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tasks_api::CallEquationRequest,::tasks_api::CallEquationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CallLinked : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CallLinked() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tasks_api::CallLinkedRequest, ::tasks_api::CallLinkedResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tasks_api::CallLinkedRequest, ::tasks_api::CallLinkedResponse>* streamer) {
                       return this->StreamedCallLinked(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CallLinked() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CallLinked(::grpc::ServerContext* /*context*/, const ::tasks_api::CallLinkedRequest* /*request*/, ::tasks_api::CallLinkedResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallLinked(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tasks_api::CallLinkedRequest,::tasks_api::CallLinkedResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CallParamS : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CallParamS() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tasks_api::CallParamSRequest, ::tasks_api::CallParamSResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tasks_api::CallParamSRequest, ::tasks_api::CallParamSResponse>* streamer) {
                       return this->StreamedCallParamS(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CallParamS() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CallParamS(::grpc::ServerContext* /*context*/, const ::tasks_api::CallParamSRequest* /*request*/, ::tasks_api::CallParamSResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCallParamS(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tasks_api::CallParamSRequest,::tasks_api::CallParamSResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CallEquation<WithStreamedUnaryMethod_CallLinked<WithStreamedUnaryMethod_CallParamS<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CallEquation<WithStreamedUnaryMethod_CallLinked<WithStreamedUnaryMethod_CallParamS<Service > > > StreamedService;
};

}  // namespace tasks_api


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_tasks_5fapi_2eproto__INCLUDED
