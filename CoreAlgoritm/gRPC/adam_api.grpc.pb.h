// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: adam_api.proto
#ifndef GRPC_adam_5fapi_2eproto__INCLUDED
#define GRPC_adam_5fapi_2eproto__INCLUDED

#include "adam_api.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace adam_api {

class AdamApiService final {
 public:
  static constexpr char const* service_full_name() {
    return "adam_api.AdamApiService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SetGlobalParams(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest& request, ::adam_api::EmptyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::adam_api::EmptyResponse>> AsyncSetGlobalParams(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::adam_api::EmptyResponse>>(AsyncSetGlobalParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::adam_api::EmptyResponse>> PrepareAsyncSetGlobalParams(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::adam_api::EmptyResponse>>(PrepareAsyncSetGlobalParamsRaw(context, request, cq));
    }
    virtual ::grpc::Status Optimize(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest& request, ::adam_api::OptimizeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::adam_api::OptimizeResponse>> AsyncOptimize(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::adam_api::OptimizeResponse>>(AsyncOptimizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::adam_api::OptimizeResponse>> PrepareAsyncOptimize(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::adam_api::OptimizeResponse>>(PrepareAsyncOptimizeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SetGlobalParams(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest* request, ::adam_api::EmptyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetGlobalParams(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest* request, ::adam_api::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Optimize(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest* request, ::adam_api::OptimizeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Optimize(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest* request, ::adam_api::OptimizeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::adam_api::EmptyResponse>* AsyncSetGlobalParamsRaw(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::adam_api::EmptyResponse>* PrepareAsyncSetGlobalParamsRaw(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::adam_api::OptimizeResponse>* AsyncOptimizeRaw(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::adam_api::OptimizeResponse>* PrepareAsyncOptimizeRaw(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetGlobalParams(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest& request, ::adam_api::EmptyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::adam_api::EmptyResponse>> AsyncSetGlobalParams(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::adam_api::EmptyResponse>>(AsyncSetGlobalParamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::adam_api::EmptyResponse>> PrepareAsyncSetGlobalParams(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::adam_api::EmptyResponse>>(PrepareAsyncSetGlobalParamsRaw(context, request, cq));
    }
    ::grpc::Status Optimize(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest& request, ::adam_api::OptimizeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::adam_api::OptimizeResponse>> AsyncOptimize(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::adam_api::OptimizeResponse>>(AsyncOptimizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::adam_api::OptimizeResponse>> PrepareAsyncOptimize(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::adam_api::OptimizeResponse>>(PrepareAsyncOptimizeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetGlobalParams(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest* request, ::adam_api::EmptyResponse* response, std::function<void(::grpc::Status)>) override;
      void SetGlobalParams(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest* request, ::adam_api::EmptyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Optimize(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest* request, ::adam_api::OptimizeResponse* response, std::function<void(::grpc::Status)>) override;
      void Optimize(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest* request, ::adam_api::OptimizeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::adam_api::EmptyResponse>* AsyncSetGlobalParamsRaw(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::adam_api::EmptyResponse>* PrepareAsyncSetGlobalParamsRaw(::grpc::ClientContext* context, const ::adam_api::GlobalParamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::adam_api::OptimizeResponse>* AsyncOptimizeRaw(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::adam_api::OptimizeResponse>* PrepareAsyncOptimizeRaw(::grpc::ClientContext* context, const ::adam_api::OptimizeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetGlobalParams_;
    const ::grpc::internal::RpcMethod rpcmethod_Optimize_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SetGlobalParams(::grpc::ServerContext* context, const ::adam_api::GlobalParamsRequest* request, ::adam_api::EmptyResponse* response);
    virtual ::grpc::Status Optimize(::grpc::ServerContext* context, const ::adam_api::OptimizeRequest* request, ::adam_api::OptimizeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetGlobalParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetGlobalParams() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetGlobalParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGlobalParams(::grpc::ServerContext* /*context*/, const ::adam_api::GlobalParamsRequest* /*request*/, ::adam_api::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGlobalParams(::grpc::ServerContext* context, ::adam_api::GlobalParamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::adam_api::EmptyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Optimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Optimize() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Optimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Optimize(::grpc::ServerContext* /*context*/, const ::adam_api::OptimizeRequest* /*request*/, ::adam_api::OptimizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOptimize(::grpc::ServerContext* context, ::adam_api::OptimizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::adam_api::OptimizeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetGlobalParams<WithAsyncMethod_Optimize<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetGlobalParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetGlobalParams() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::adam_api::GlobalParamsRequest, ::adam_api::EmptyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::adam_api::GlobalParamsRequest* request, ::adam_api::EmptyResponse* response) { return this->SetGlobalParams(context, request, response); }));}
    void SetMessageAllocatorFor_SetGlobalParams(
        ::grpc::MessageAllocator< ::adam_api::GlobalParamsRequest, ::adam_api::EmptyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::adam_api::GlobalParamsRequest, ::adam_api::EmptyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetGlobalParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGlobalParams(::grpc::ServerContext* /*context*/, const ::adam_api::GlobalParamsRequest* /*request*/, ::adam_api::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetGlobalParams(
      ::grpc::CallbackServerContext* /*context*/, const ::adam_api::GlobalParamsRequest* /*request*/, ::adam_api::EmptyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Optimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Optimize() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::adam_api::OptimizeRequest, ::adam_api::OptimizeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::adam_api::OptimizeRequest* request, ::adam_api::OptimizeResponse* response) { return this->Optimize(context, request, response); }));}
    void SetMessageAllocatorFor_Optimize(
        ::grpc::MessageAllocator< ::adam_api::OptimizeRequest, ::adam_api::OptimizeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::adam_api::OptimizeRequest, ::adam_api::OptimizeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Optimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Optimize(::grpc::ServerContext* /*context*/, const ::adam_api::OptimizeRequest* /*request*/, ::adam_api::OptimizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Optimize(
      ::grpc::CallbackServerContext* /*context*/, const ::adam_api::OptimizeRequest* /*request*/, ::adam_api::OptimizeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetGlobalParams<WithCallbackMethod_Optimize<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetGlobalParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetGlobalParams() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetGlobalParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGlobalParams(::grpc::ServerContext* /*context*/, const ::adam_api::GlobalParamsRequest* /*request*/, ::adam_api::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Optimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Optimize() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Optimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Optimize(::grpc::ServerContext* /*context*/, const ::adam_api::OptimizeRequest* /*request*/, ::adam_api::OptimizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetGlobalParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetGlobalParams() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetGlobalParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGlobalParams(::grpc::ServerContext* /*context*/, const ::adam_api::GlobalParamsRequest* /*request*/, ::adam_api::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGlobalParams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Optimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Optimize() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Optimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Optimize(::grpc::ServerContext* /*context*/, const ::adam_api::OptimizeRequest* /*request*/, ::adam_api::OptimizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestOptimize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetGlobalParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetGlobalParams() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetGlobalParams(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetGlobalParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGlobalParams(::grpc::ServerContext* /*context*/, const ::adam_api::GlobalParamsRequest* /*request*/, ::adam_api::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetGlobalParams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Optimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Optimize() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Optimize(context, request, response); }));
    }
    ~WithRawCallbackMethod_Optimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Optimize(::grpc::ServerContext* /*context*/, const ::adam_api::OptimizeRequest* /*request*/, ::adam_api::OptimizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Optimize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetGlobalParams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetGlobalParams() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::adam_api::GlobalParamsRequest, ::adam_api::EmptyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::adam_api::GlobalParamsRequest, ::adam_api::EmptyResponse>* streamer) {
                       return this->StreamedSetGlobalParams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetGlobalParams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetGlobalParams(::grpc::ServerContext* /*context*/, const ::adam_api::GlobalParamsRequest* /*request*/, ::adam_api::EmptyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetGlobalParams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::adam_api::GlobalParamsRequest,::adam_api::EmptyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Optimize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Optimize() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::adam_api::OptimizeRequest, ::adam_api::OptimizeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::adam_api::OptimizeRequest, ::adam_api::OptimizeResponse>* streamer) {
                       return this->StreamedOptimize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Optimize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Optimize(::grpc::ServerContext* /*context*/, const ::adam_api::OptimizeRequest* /*request*/, ::adam_api::OptimizeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedOptimize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::adam_api::OptimizeRequest,::adam_api::OptimizeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetGlobalParams<WithStreamedUnaryMethod_Optimize<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetGlobalParams<WithStreamedUnaryMethod_Optimize<Service > > StreamedService;
};

}  // namespace adam_api


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_adam_5fapi_2eproto__INCLUDED
