// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tasks_api.proto

#include "tasks_api.pb.h"
#include "tasks_api.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace tasks_api {

static const char* TasksApiService_method_names[] = {
  "/tasks_api.TasksApiService/CallEquation",
  "/tasks_api.TasksApiService/CallLinked",
  "/tasks_api.TasksApiService/CallParamS",
};

std::unique_ptr< TasksApiService::Stub> TasksApiService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TasksApiService::Stub> stub(new TasksApiService::Stub(channel, options));
  return stub;
}

TasksApiService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CallEquation_(TasksApiService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CallLinked_(TasksApiService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CallParamS_(TasksApiService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TasksApiService::Stub::CallEquation(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest& request, ::tasks_api::CallEquationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tasks_api::CallEquationRequest, ::tasks_api::CallEquationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CallEquation_, context, request, response);
}

void TasksApiService::Stub::async::CallEquation(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest* request, ::tasks_api::CallEquationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tasks_api::CallEquationRequest, ::tasks_api::CallEquationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CallEquation_, context, request, response, std::move(f));
}

void TasksApiService::Stub::async::CallEquation(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest* request, ::tasks_api::CallEquationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CallEquation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tasks_api::CallEquationResponse>* TasksApiService::Stub::PrepareAsyncCallEquationRaw(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tasks_api::CallEquationResponse, ::tasks_api::CallEquationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CallEquation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tasks_api::CallEquationResponse>* TasksApiService::Stub::AsyncCallEquationRaw(::grpc::ClientContext* context, const ::tasks_api::CallEquationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCallEquationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TasksApiService::Stub::CallLinked(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest& request, ::tasks_api::CallLinkedResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tasks_api::CallLinkedRequest, ::tasks_api::CallLinkedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CallLinked_, context, request, response);
}

void TasksApiService::Stub::async::CallLinked(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest* request, ::tasks_api::CallLinkedResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tasks_api::CallLinkedRequest, ::tasks_api::CallLinkedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CallLinked_, context, request, response, std::move(f));
}

void TasksApiService::Stub::async::CallLinked(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest* request, ::tasks_api::CallLinkedResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CallLinked_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tasks_api::CallLinkedResponse>* TasksApiService::Stub::PrepareAsyncCallLinkedRaw(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tasks_api::CallLinkedResponse, ::tasks_api::CallLinkedRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CallLinked_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tasks_api::CallLinkedResponse>* TasksApiService::Stub::AsyncCallLinkedRaw(::grpc::ClientContext* context, const ::tasks_api::CallLinkedRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCallLinkedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status TasksApiService::Stub::CallParamS(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest& request, ::tasks_api::CallParamSResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tasks_api::CallParamSRequest, ::tasks_api::CallParamSResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CallParamS_, context, request, response);
}

void TasksApiService::Stub::async::CallParamS(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest* request, ::tasks_api::CallParamSResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tasks_api::CallParamSRequest, ::tasks_api::CallParamSResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CallParamS_, context, request, response, std::move(f));
}

void TasksApiService::Stub::async::CallParamS(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest* request, ::tasks_api::CallParamSResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CallParamS_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tasks_api::CallParamSResponse>* TasksApiService::Stub::PrepareAsyncCallParamSRaw(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tasks_api::CallParamSResponse, ::tasks_api::CallParamSRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CallParamS_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tasks_api::CallParamSResponse>* TasksApiService::Stub::AsyncCallParamSRaw(::grpc::ClientContext* context, const ::tasks_api::CallParamSRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCallParamSRaw(context, request, cq);
  result->StartCall();
  return result;
}

TasksApiService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TasksApiService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TasksApiService::Service, ::tasks_api::CallEquationRequest, ::tasks_api::CallEquationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TasksApiService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tasks_api::CallEquationRequest* req,
             ::tasks_api::CallEquationResponse* resp) {
               return service->CallEquation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TasksApiService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TasksApiService::Service, ::tasks_api::CallLinkedRequest, ::tasks_api::CallLinkedResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TasksApiService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tasks_api::CallLinkedRequest* req,
             ::tasks_api::CallLinkedResponse* resp) {
               return service->CallLinked(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TasksApiService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TasksApiService::Service, ::tasks_api::CallParamSRequest, ::tasks_api::CallParamSResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TasksApiService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tasks_api::CallParamSRequest* req,
             ::tasks_api::CallParamSResponse* resp) {
               return service->CallParamS(ctx, req, resp);
             }, this)));
}

TasksApiService::Service::~Service() {
}

::grpc::Status TasksApiService::Service::CallEquation(::grpc::ServerContext* context, const ::tasks_api::CallEquationRequest* request, ::tasks_api::CallEquationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TasksApiService::Service::CallLinked(::grpc::ServerContext* context, const ::tasks_api::CallLinkedRequest* request, ::tasks_api::CallLinkedResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TasksApiService::Service::CallParamS(::grpc::ServerContext* context, const ::tasks_api::CallParamSRequest* request, ::tasks_api::CallParamSResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tasks_api
#include <grpcpp/ports_undef.inc>

